# Documentation métier – Modèles et gestion des doublons

## 1. Modèles principaux

### Review

* **Définition** : processus regroupant un ensemble de blocs KYC pour un client pivot et ses éventuels membres de famille ou mandataires.
* **Champs clés** :

  * `pivotId` : identifiant du client pivot.
  * `status` : état du review (ex. `IN_PROGRESS`).
  * `blocks` : liste des `BlockInstance` associés.

### BlockInstance (classe abstraite)

* **Définition** : unité atomique de travail KYC (StaticData, Document, KYT, NameScreening).
* **Champs clés** :

  * `customerId` : identifiant du client concerné.
  * `blockName` : type logique du bloc.
  * `statusActif` : true si le bloc est actif (en cours ou valide), false si finalisé.
  * `fingerprint` : empreinte unique pour la déduplication.
  * `validFrom` / `validTo` : période de validité.

### Sous-classes de BlockInstance

* **StaticDataBlock** : données de référence du client.
* **DocumentBlock** : document KYC (type, émetteur, numéro).
* **KYTBlock** : données de transaction pour analyse (Know Your Transaction).
* **NameScreeningBlock** : screening de listes (PEP, sanctions), valide 6 mois.

## 2. Règles de périmètre des blocs

| Rôle       | Static Data | Document | KYT | Name Screening |
| ---------- | ----------- | -------- | --- | -------------- |
| Pivot      | ✅           | ✅        | ✅   | ✅              |
| Membre     | ✅           | ✅        | ❌   | ✅              |
| Mandataire | ❌           | ✅        | ❌   | ✅              |

## 3. Gestion des doublons

### Définition du fingerprint

* Construit à partir de :

  * `customerId`
  * indicateur `statusActif` (uniquement si actif)
  * `blockName`
* Utilisé pour détecter un bloc déjà existant.

### Cas spécifiques

#### Cas 1 – Review en cours pour un membre de famille

* Si un bloc actif existe déjà pour un membre dans une autre review, il est **réutilisé** et non recréé.
* Avantage : éviter les re-traitements et conserver la cohérence des données.

#### Cas 2 – Name Screening valide (< 6 mois)

* Si un bloc Name Screening **APPROVED** avec `validTo` ≥ date du jour existe pour le client, il est réutilisé.
* Aucun nouveau bloc n’est créé.

#### Cas 3 – Bloc actif déjà en cours

* Si un bloc actif avec le même fingerprint existe (`statusActif = true`), il est rattaché au review en cours.
* Si aucun bloc actif mais un bloc APPROVED encore valide existe, réutilisation également.

## 4. Objectifs métier

* **Optimiser les efforts** : éviter le traitement en double des mêmes informations.
* **Réduire les délais** : en réutilisant les blocs déjà validés ou en cours.
* **Garantir la cohérence** : un bloc en cours de traitement est unique pour un client/type donné.

## 5. Points de vigilance

* Les règles doivent être partagées avec les équipes métiers pour valider les critères de validité.
* La logique de déduplication repose sur des données normalisées pour éviter les faux négatifs.
* La réutilisation doit être traçable via `sourceReviewId`.

---

Cette documentation permet d’expliquer aux équipes métiers le fonctionnement du modèle et les scénarios précis où les doublons sont évités grâce au calcul du fingerprint et aux règles de validité.

---

# Documentation métier — Modèles & Cas de doublons

> **But** : expliquer simplement aux équipes métier le **rôle des modèles**, **quand un bloc est réutilisé** et **quand un nouveau bloc est créé**, avec des exemples concrets.

## 1) Modèles (vue métier)

### 1.1 Review

* **Définition** : dossier de revue KYC déclenché pour un **client pivot** et, si besoin, sa **famille** (membres, mandataires).
* **Contenu** : une **liste de Blocks** rattachés à chaque sujet (pivot/membre).
* **États** : *Draft → In Progress → Completed/Archived*.

### 1.2 Blocks (unités de travail)

* **Static Data** : vérification des données d’identification (identité, adresse…).
* **Document** : collecte/validation de pièces (passeport, justificatif…).
* **KYT** : analyse des transactions (comptes/périodes).
* **Name Screening** : screening listes (sanctions/PEP/adverse media).
* **Validité clé** : *Name Screening* est **valide 6 mois**. Les autres dépendent des règles internes (ex : documents périmés au-delà d’une date).

### 1.3 KYC Profile (vue consolidée)

* **Définition** : pour un client, photo **la plus à jour** de ses derniers Blocks **APPROUVÉS** (un par type).
* **Mise à jour** : si un nouveau Block approuvé arrive, le profil **remplace** le lien vers l’ancien.

### 1.4 Fingerprint (empreinte de bloc)

* **Objet** : éviter les doublons.
* **Principe** : empreinte calculée à partir de **idClient + statut actif (true/false) + nom du block** ; elle permet d’identifier un bloc « équivalent » déjà en cours/valide.

---

## 2) Règles de réutilisation vs création (anti‑doublons)

### 2.1 Par rôle

| Rôle           | Types de Blocks requis                         |
| -------------- | ---------------------------------------------- |
| **Pivot**      | Static Data, Document, **KYT**, Name Screening |
| **Membre**     | Static Data, Document, Name Screening          |
| **Mandataire** | Document, Name Screening                       |

### 2.2 Décision (arbre simplifié)

1. **Name Screening**

* S’il existe un Name Screening **< 6 mois** pour le **même client** → **Réutiliser** (ne pas créer).
* Sinon → **Créer** un nouveau bloc.

2. **Autres blocks (Static Data / Document / KYT)**

* Calculer le **Fingerprint**.
* S’il existe un **bloc actif** (non final) avec **le même Fingerprint** → **Réutiliser** (attacher à la nouvelle Review).
* Sinon → **Créer** un nouveau bloc.

3. **Reviews parallèles**

* Si un **membre** a déjà une Review **en cours** : les blocks requis pour ce membre dans la nouvelle Review **réutilisent** ceux de sa Review en cours. Si un type manque, il est **créé** uniquement pour couvrir ce besoin, **sans dupliquer** les autres.

---

## 3) Cas spécifiques de doublons — Exemples concrets

### Cas A — Review pivot + membre sans historique

* **Contexte** : A (pivot) et B (membre) n’ont aucun bloc.
* **Résultat** : création de 4 blocs pour A (Static, Doc, KYT, Screening) et 3 pour B (Static, Doc, Screening). **Aucun doublon**.

### Cas B — Membre avec Review en cours

* **Contexte** : B a déjà une Review *In Progress* avec ses blocks.
* **Action** : je lance une Review pour A en incluant B (membre).
* **Résultat** : les 3 blocks de B (Static, Doc, Screening) sont **réutilisés** dans la Review d’A ; **pas de création** si déjà actifs/valides. Si *Document* manque chez B, on **crée** uniquement *Document* pour couvrir la Review d’A.

### Cas C — Name Screening encore valide (< 6 mois)

* **Contexte** : A possède un bloc *Name Screening* approuvé il y a 3 mois.
* **Action** : nouvelle Review pour A.
* **Résultat** : **réutilisation** du Screening existant ; **pas de nouveau bloc**.

### Cas D — Deux Reviews en parallèle sur le même client

* **Contexte** : deux équipes déclenchent en même temps une Review pour A.
* **Mécanisme** : l’empreinte (Fingerprint) + verrouillage applicatif empêchent la **double création** d’un même bloc actif ; la seconde Review **attache** les blocs déjà créés.

### Cas E — Document avec même identité logique

* **Contexte** : un *Passeport* (même type, émetteur, numéro) est déjà en cours de vérification pour B.
* **Résultat** : la nouvelle Review qui demande ce *Document* **réutilise** le bloc actif ; si le passeport expire et qu’un **nouveau** est fourni (numéro différent), un **nouveau bloc** est créé.

### Cas F — KYT par période

* **Contexte** : un bloc KYT « dernier 30 jours » existe déjà pour A.
* **Résultat** : si la période demandée est **exactement la même**, on **réutilise** ; si la période diffère (ex : 60 jours), un **nouveau** bloc KYT est créé.

---

## 4) Règles métiers complémentaires

* **Statut actif (true/false)** : tant que le bloc n’est **pas finalisé**, il est **réutilisable** via son Fingerprint ; une fois finalisé (false), il peut être remplacé par un nouveau.
* **KYC Profile** : contient **1 seul bloc par type** (le dernier approuvé). Lors d’une approbation, le lien du profil **bascule** automatiquement sur le nouveau bloc et **délie** l’ancien.
* **Traçabilité** : l’attribut `sourceReviewId` indique de quelle Review provient un bloc réutilisé.
* **Confidentialité** : le Fingerprint ne stocke **pas** de PII en clair (hash normalisé + option de salage).

---

## 5) Indicateurs & contrôles utiles (pour le pilotage métier)

* **Taux de réutilisation des blocs (%)** : mesure l’efficacité anti‑doublons.
* **Délai moyen de complétion par type** : Static, Doc, KYT, Screening.
* **Taux d’expiration Screening** (< 6 mois) : alerte quand il faut relancer.
* **Nombre de collisions évitées** (créations concurrentes bloquées).
* **Erreurs / Reworks** : blocs rejetés puis recréés.

---

## 6) FAQ rapide (métier)

* **Q : Pourquoi parfois un nouveau bloc est créé alors qu’il en existe un autre ?**
  **R :** soit le bloc existant est **finalisé/périmé**, soit son **périmètre** (doc/période/paramètres) **diffère**.
* **Q : Et si deux équipes lancent le même jour ?**
  **R :** la réutilisation se fait automatiquement ; une seule équipe crée, l’autre **attache**.
* **Q : Puis-je forcer une recréation ?**
  **R :** oui, via une demande justifiée (ex : changement de situation, suspicion) ; un nouveau bloc est alors créé et le profil basculera dessus une fois approuvé.
